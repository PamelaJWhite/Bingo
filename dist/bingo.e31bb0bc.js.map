{"version":3,"sources":["index.js"],"names":["console","log","url","baseWordArray","newArray","getList","axios","get","then","res","makeRandomArray","copiedArray","i","newNum","Math","floor","random","length","transferredWord","slice","push","splice","reset","document","getElementById","innerHTML","markCell","event","currentTarget","id","currentId","currentElement"],"mappings":"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","file":"bingo.e31bb0bc.js","sourceRoot":"..","sourcesContent":["console.log(\"up and running\")\n//---------imports-----------\n//Import axios for api call\n// import axios from \"axios\";\n\n//--------global variables--------\n\nurl = \"https://localhost:4005\"\n\nbaseWordArray = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"turquoise\", \"magenta\", \"grey\", \"purple\", \"teal\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"dog\", \"cat\", \"fish\", \"guinea pig\", \"turtle\", \"bills\", \"dolphins\", \"patriots\", \"jets\", \"eagles\", \"cowboys\", \"giants\", \"commanders\", \"rams\", \"cardinals\"]\n\n//with multiple users, they're going to need their OWN array, \n//not one array that everyone works from \nlet newArray = []\n\n//------------- calls to db/ backend------------\n//get the ffblist from the db\nconst getList = () => {\n  console.log(\"in getList()\")\n  //axios get call for all titles, including token in header for authorization\n  axios.get(url + `/`)\n  .then((res)=> {\n      console.log(\"made axios call!\")\n      console.log(\"res\", res)\n  })\n}\n\n//I am so effing proud of myself\n//i looked up more than half a dozen ways to shuffle an array, make a random array, etc.\n//and then I just came up with this, on my own, which fits my purposes\nconst makeRandomArray = () => {\n  //make a copy of the array\n  let copiedArray = [...baseWordArray]\n\n  //loop 25 times\n  for (let i = 0; i<=24; i++){\n    //get a random number between 0 and length of copiedArray\n    let newNum = Math.floor(Math.random() * copiedArray.length)\n\n    //get the word at the index of newNum\n    transferredWord = copiedArray.slice(newNum, newNum+1)\n\n    //put that transferredWord into the newArray\n    newArray.push(transferredWord[0])\n\n    //take the word out of the copiedArray\n    copiedArray.splice(newNum, 1)\n  }\n  return newArray\n}\n\nconst reset = () => {\n  console.log(\"clicked reset\")\n\n  getList()\n\n  newArray = []\n\n  makeRandomArray()\n  \n  //loop 25 times\n  for (let i = 0; i<=24; i++){\n    //grab each box by id, set it's innerHTML to the word at the index i\n    document.getElementById(i).innerHTML = newArray[i];\n  }\n}\n\nconst markCell = (event) =>{\n  console.log(\"event.currentTarget.id: \", event.currentTarget.id)\n  let currentId = event.currentTarget.id\n  console.log(\"currentId: \", currentId)\n  let currentElement = event.currentTarget\n  console.log(\"currentElement: \", currentElement)\n  //if the innerHTML = x\n  //then make it the word where the id equals the index\n  //else make it X\n  currentElement.innerHTML === \"X\" ? currentElement.innerHTML = newArray[currentId] : currentElement.innerHTML = \"X\"\n  // console.log()\n  \n  \n  \n}"]}